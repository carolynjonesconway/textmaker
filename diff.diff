diff --git a/diff.diff b/diff.diff
index 85abe6c..e69de29 100644
--- a/diff.diff
+++ b/diff.diff
@@ -1,504 +0,0 @@
-diff --git a/.gitignore b/.gitignore
-index bdaab25..2654667 100644
---- a/.gitignore
-+++ b/.gitignore
-@@ -1 +1,2 @@
- env/
-+diff.diff
-diff --git a/README.md b/README.md
-new file mode 100644
-index 0000000..0283fb7
---- /dev/null
-+++ b/README.md
-@@ -0,0 +1,4 @@
-+# TextMaker
-+Computer-generated text, in the style of your favorite wordsmiths.
-+
-+
-diff --git a/io_utils.py b/io_utils.py
-new file mode 100644
-index 0000000..1fcb684
---- /dev/null
-+++ b/io_utils.py
-@@ -0,0 +1,8 @@
-+import os
-+
-+
-+def read_text(filename):
-+    path = os.sep.join(["texts", filename])
-+    with open(path) as f:
-+        text = f.read()
-+    return text
-diff --git a/server.py b/server.py
-index 33e1dcd..13ddc55 100644
---- a/server.py
-+++ b/server.py
-@@ -1,6 +1,7 @@
- import os
- 
- from flask import Flask, render_template
-+from io_utils import read_text
- from textmaker import MarkovMaker
- 
- DEBUG = not int(os.environ.get("NO_DEBUG", 0))
-@@ -14,9 +15,16 @@ generator.train("texts/trump.txt")
- 
- @app.route("/")
- def text_maker():
-+    """Display an auto-generated text"""
-     text, meta = generator.make_text(return_meta=True)
-     return render_template("text_maker.html", text=text, meta=meta)
- 
- 
-+@app.route("/texts/<path:filename>")
-+def show_text(filename):
-+    """Display a raw training text"""
-+    return read_text(filename)
-+
-+
- if __name__ == '__main__':
-     app.run(debug=DEBUG, host="0.0.0.0", port=PORT)
-diff --git a/templates/text_maker.html b/templates/text_maker.html
-index b43a6bd..d5b87e6 100644
---- a/templates/text_maker.html
-+++ b/templates/text_maker.html
-@@ -13,7 +13,9 @@
- <div id="main">
-     <div id="sidebar">
-         <div id="text-meta">
--            <b>Training:</b> {{ meta.source.filepath }}
-+            {% with filename = meta.source.filename %}
-+            Trained on <a href="texts/{{ filename }}">{{ filename }}</a>
-+            {% endwith %}
-         </div>
-     </div>
-     <div id="content">
-diff --git a/textmaker/core.py b/textmaker/core.py
-index 0e4468a..66b5ef2 100644
---- a/textmaker/core.py
-+++ b/textmaker/core.py
-@@ -1,3 +1,4 @@
-+import os
- import markov
- from abc import abstractmethod
- from dictmerge import dictmerge
-@@ -21,8 +22,9 @@ class MarkovMaker(TextMaker):
-     def train(self, filepath, **src_meta):
-         with open(filepath) as f:
-             text = f.read()
-+        filename = filepath.split(os.sep)[-1]
-         self._meta["source"] = dictmerge({
--            "filepath": filepath,
-+            "filename": filename,
-             "length": len(text)
-         }, src_meta)
-         self.chains = markov.make_chains(text)
-diff --git a/.gitignore b/.gitignore
-index 2654667..61af17e 100644
---- a/.gitignore
-+++ b/.gitignore
-@@ -1,2 +1,3 @@
- env/
- diff.diff
-+__pycache__
-diff --git a/diff.diff b/diff.diff
-index 181aa34..b2798c9 100644
---- a/diff.diff
-+++ b/diff.diff
-@@ -1,308 +1,95 @@
--diff --git a/requirements.txt b/requirements.txt
-+diff --git a/.gitignore b/.gitignore
-+index bdaab25..2654667 100644
-+--- a/.gitignore
-++++ b/.gitignore
-+@@ -1 +1,2 @@
-+ env/
-++diff.diff
-+diff --git a/README.md b/README.md
- new file mode 100644
--index 0000000..6aee249
-+index 0000000..0283fb7
- --- /dev/null
--+++ b/requirements.txt
--@@ -0,0 +1,6 @@
--+click==6.7
--+Flask==0.12.2
--+itsdangerous==0.24
--+Jinja2==2.9.6
--+MarkupSafe==1.0
--+Werkzeug==0.12.2
--diff --git a/markov-chains/further_study.py b/markov-chains/further_study.py
--deleted file mode 100644
--index 05c5b78..0000000
----- a/markov-chains/further_study.py
--+++ /dev/null
--@@ -1,112 +0,0 @@
---import sys
---from random import choice
---
---
---def open_and_read_file(filepath):
---    """Takes file path as string; returns text as string.
---
---    Takes a string that is a file path, opens the file, and turns
---    the file's contents as one string of text.
---    """
---
---    text = ""
---    for file in filepath:
---        text_file = open(file)
---        text = text + text_file.read()
---        text_file.close()
---
---    return text
---
---
---def make_chains(text_string, n):
---    """Takes input text as string; returns dictionary of markov chains.
---
---    A chain will be a key that consists of a tuple of (word1, word2)
---    and the value would be a list of the word(s) that follow those two
---    words in the input text.
---
---    For example:
---
---        >>> chains = make_chains("hi there mary hi there juanita")
---
---    Each bigram will be a key in chains:
---
---        >>> sorted(chains.keys())
---        [('hi', 'there'), ('mary', 'hi'), ('there', 'juanita'), ('there', 'mary')]
---
---    Each item in chains is a list of all possible following words:
---
---        >>> chains[('hi', 'there')]
---        ['mary', 'juanita']
---
---        >>> chains[('there','juanita')]
---        [None]
---    """
---
---    chains = {}
---
---    words = text_string.split()
---
---    words.append(None)
---
---    for i in range(len(words) - n):
---        key = tuple(words[i:i + n])
---        value = words[i + n]
---
---        if key not in chains:
---            chains[key] = []
---
---        chains[key].append(value)
---
---        # or we could replace the last three lines with:
---        #    chains.setdefault(key, []).append(value)
---
---    return chains
---
---
---def make_text(chains):
---    """Returns text from chains."""
---
---    # to check a value ends in punctuation.
---    punct = ([".", "?", "!"])
---
---    key = choice(chains.keys())
---    # check if the first character of the first item in the key is uppercase
---    while not key[0][0].isupper():
---        key = choice(chains.keys())
---
---    words = [key[0], key[1]]
---    word = choice(chains[key])
---
---    while word is not None:
---        key = (key[1], word)
---        words.append(word)
---        # if word ends in punctuation, break out of the loop
---        if word[-1] in punct:
---            break
---        word = choice(chains[key])
---
---
---
---
---    return " ".join(words)
---
---
---# Get the filepath from the user through a command line prompt, ex:
---# python markov.py green-eggs.txt
---
---input_path = sys.argv[1:]
---
---# This could also say something like:
---#   input_path = "green-eggs.txt"
---
---# Open the file and turn it into one long string
---input_text = open_and_read_file(input_path)
---
---# Get a Markov chain
---chains = make_chains(input_text, 2)
---
---# Produce random text
---random_text = make_text(chains)
---
---print random_text
--diff --git a/markov-chains/gettysburg.txt b/markov-chains/gettysburg.txt
--deleted file mode 100644
--index 15e64e9..0000000
----- a/markov-chains/gettysburg.txt
--+++ /dev/null
--@@ -1,18 +0,0 @@
---Four score and seven years ago our fathers brought forth on this continent, a new nation,
---conceived in Liberty, and dedicated to the proposition that all men are created equal.
---
---Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived
---and so dedicated, can long endure. We are met on a great battle-field of that war. We have come
---to dedicate a portion of that field, as a final resting place for those who here gave their
---lives that that nation might live. It is altogether fitting and proper that we should do this.
---
---But, in a larger sense, we can not dedicate -- we can not consecrate -- we can not hallow --
---this ground. The brave men, living and dead, who struggled here, have consecrated it, far above
---our poor power to add or detract. The world will little note, nor long remember what we say
---here, but it can never forget what they did here. It is for us the living, rather, to be
---dedicated here to the unfinished work which they who fought here have thus far so nobly advanced.
---It is rather for us to be here dedicated to the great task remaining before us -- that from
---these honored dead we take increased devotion to that cause for which they gave the last full
---measure of devotion -- that we here highly resolve that these dead shall not have died in
---vain -- that this nation, under God, shall have a new birth of freedom -- and that government
---of the people, by the people, for the people, shall not perish from the earth.
--\ No newline at end of file
--diff --git a/markov-chains/green-eggs.txt b/markov-chains/green-eggs.txt
--deleted file mode 100644
--index ca8b267..0000000
----- a/markov-chains/green-eggs.txt
--+++ /dev/null
--@@ -1,6 +0,0 @@
---Would you could you in a house?
---Would you could you with a mouse?
---Would you could you in a box?
---Would you could you with a fox?
---Would you like green eggs and ham?
---Would you like them, Sam I am?
--diff --git a/markov-chains/markov.py b/markov-chains/markov.py
--deleted file mode 100644
--index 5c06b29..0000000
----- a/markov-chains/markov.py
--+++ /dev/null
--@@ -1,96 +0,0 @@
---"""
---USAGE: `python markov.py gettysburg.txt`
---"""
---
---import sys
---import random
---
---
---def open_and_read_file(filepath):
---    """Takes file path as string; returns text as string.
---
---    Takes a string that is a file path, opens the file, and turns
---    the file's contents as one string of text.
---    """
---
---    with open(filepath) as f:
---        text = f.read()
---    return text
---
---
---def make_chains(text_string):
---    """Takes input text as string; returns dictionary of markov chains.
---
---    A chain will be a key that consists of a tuple of (word1, word2)
---    and the value would be a list of the word(s) that follow those two
---    words in the input text.
---
---    For example:
---
---        >>> chains = make_chains("hi there mary hi there juanita")
---       
---    Each bigram will be a key in chains:
---   
---        >>> sorted(chains.keys())
---        [('hi', 'there'), ('mary', 'hi'), ('there', 'juanita'), ('there', 'mary')]
---    
---    Each item in chains is a list of all possible following words:
---         
---        >>> chains[('hi', 'there')]
---        ['mary', 'juanita']
---
---        >>> chains[('there','juanita')]
---        [None]
---    """
---
---    chains = {}
---
---    words = text_string.split()
---
---    # To set a stop point, append None to the end of our word list.
---
---    words.append(None)
---
---    for i in range(len(words) - 2):
---        key = (words[i], words[i + 1])
---        value = words[i + 2]
---
---        if key not in chains:
---            chains[key] = []
---
---        chains[key].append(value)
---
---        # or we could replace the last three lines with:
---        #    chains.setdefault(key, []).append(value)
---
---    return chains
---
---
---def make_text(chains):
---    """Returns text from chains."""
---
---    key = random.choice(list(chains.keys()))
---    words = [key[0], key[1]]
---    word = random.choice(chains[key])
---
---    #   Keep looping until we reach a value of None
---    # (which would mean it was the end of our original text)
---    # Note that for long texts (like a full book), this might mean
---    # it would run for a very long time.
---
---    while word is not None:
---        key = (key[1], word)
---        words.append(word)
---        word = random.choice(chains[key])
---
---    return " ".join(words)
---
---
---if __name__ == '__main__':
---    # Read the specified file into a string
---    input_text = open_and_read_file(sys.argv[1])
---
---    # Get a Markov chain & generate random text
---    chains = make_chains(input_text)
---    random_text = make_text(chains)
---    print(random_text)
--diff --git a/requirements.txt b/requirements.txt
--index 6aee249..eb88f5f 100644
----- a/requirements.txt
--+++ b/requirements.txt
--@@ -1,4 +1,5 @@
-- click==6.7
--+dictmerge==0.2.0
-- Flask==0.12.2
-- itsdangerous==0.24
-- Jinja2==2.9.6
--diff --git a/server.py b/server.py
--index 5a03df9..33e1dcd 100644
----- a/server.py
--+++ b/server.py
--@@ -1 +1,22 @@
---from flask import Flask
--+import os
--+
--+from flask import Flask, render_template
--+from textmaker import MarkovMaker
-++++ b/README.md
-+@@ -0,0 +1,4 @@
-++# TextMaker
-++Computer-generated text, in the style of your favorite wordsmiths.
- +
--+DEBUG = not int(os.environ.get("NO_DEBUG", 0))
--+PORT = int(os.environ.get("PORT", 5001))
- +
--+app = Flask(__name__)
--+
--+generator = MarkovMaker()
--+generator.train("texts/trump.txt")
-+diff --git a/io_utils.py b/io_utils.py
-+new file mode 100644
-+index 0000000..1fcb684
-+--- /dev/null
-++++ b/io_utils.py
-+@@ -0,0 +1,8 @@
-++import os
- +
- +
--+@app.route("/")
--+def text_maker():
--+    text, meta = generator.make_text(return_meta=True)
--+    return render_template("text_maker.html", text=text, meta=meta)
-++def read_text(filename):
-++    path = os.sep.join(["texts", filename])
-++    with open(path) as f:
-++        text = f.read()
-++    return text
-+diff --git a/server.py b/server.py
-+index 33e1dcd..13ddc55 100644
-+--- a/server.py
-++++ b/server.py
-+@@ -1,6 +1,7 @@
-+ import os
-+ 
-+ from flask import Flask, render_template
-++from io_utils import read_text
-+ from textmaker import MarkovMaker
-+ 
-+ DEBUG = not int(os.environ.get("NO_DEBUG", 0))
-+@@ -14,9 +15,16 @@ generator.train("texts/trump.txt")
-+ 
-+ @app.route("/")
-+ def text_maker():
-++    """Display an auto-generated text"""
-+     text, meta = generator.make_text(return_meta=True)
-+     return render_template("text_maker.html", text=text, meta=meta)
-+ 
-+ 
-++@app.route("/texts/<path:filename>")
-++def show_text(filename):
-++    """Display a raw training text"""
-++    return read_text(filename)
- +
- +
--+if __name__ == '__main__':
--+    app.run(debug=DEBUG, host="0.0.0.0", port=PORT)
-- 
-+ if __name__ == '__main__':
-+     app.run(debug=DEBUG, host="0.0.0.0", port=PORT)
-+diff --git a/templates/text_maker.html b/templates/text_maker.html
-+index b43a6bd..d5b87e6 100644
-+--- a/templates/text_maker.html
-++++ b/templates/text_maker.html
-+@@ -13,7 +13,9 @@
-+ <div id="main">
-+     <div id="sidebar">
-+         <div id="text-meta">
-+-            <b>Training:</b> {{ meta.source.filepath }}
-++            {% with filename = meta.source.filename %}
-++            Trained on <a href="texts/{{ filename }}">{{ filename }}</a>
-++            {% endwith %}
-+         </div>
-+     </div>
-+     <div id="content">
-+diff --git a/textmaker/core.py b/textmaker/core.py
-+index 0e4468a..66b5ef2 100644
-+--- a/textmaker/core.py
-++++ b/textmaker/core.py
-+@@ -1,3 +1,4 @@
-++import os
-+ import markov
-+ from abc import abstractmethod
-+ from dictmerge import dictmerge
-+@@ -21,8 +22,9 @@ class MarkovMaker(TextMaker):
-+     def train(self, filepath, **src_meta):
-+         with open(filepath) as f:
-+             text = f.read()
-++        filename = filepath.split(os.sep)[-1]
-+         self._meta["source"] = dictmerge({
-+-            "filepath": filepath,
-++            "filename": filename,
-+             "length": len(text)
-+         }, src_meta)
-+         self.chains = markov.make_chains(text)
- 
diff --git a/io_utils.py b/io_utils.py
deleted file mode 100644
index 1fcb684..0000000
--- a/io_utils.py
+++ /dev/null
@@ -1,8 +0,0 @@
-import os
-
-
-def read_text(filename):
-    path = os.sep.join(["texts", filename])
-    with open(path) as f:
-        text = f.read()
-    return text
diff --git a/requirements.txt b/requirements.txt
index eb88f5f..940fe48 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -4,4 +4,7 @@ Flask==0.12.2
 itsdangerous==0.24
 Jinja2==2.9.6
 MarkupSafe==1.0
+python-frontmatter==0.4.2
+PyYAML==3.12
+six==1.10.0
 Werkzeug==0.12.2
diff --git a/server.py b/server.py
index 13ddc55..706ca5d 100644
--- a/server.py
+++ b/server.py
@@ -1,7 +1,7 @@
 import os
+import frontmatter
 
 from flask import Flask, render_template
-from io_utils import read_text
 from textmaker import MarkovMaker
 
 DEBUG = not int(os.environ.get("NO_DEBUG", 0))
@@ -10,7 +10,8 @@ PORT = int(os.environ.get("PORT", 5001))
 app = Flask(__name__)
 
 generator = MarkovMaker()
-generator.train("texts/trump.txt")
+training_filepath = os.sep.join(["texts", "trump.txt"])
+generator.train(training_filepath)
 
 
 @app.route("/")
@@ -23,7 +24,9 @@ def text_maker():
 @app.route("/texts/<path:filename>")
 def show_text(filename):
     """Display a raw training text"""
-    return read_text(filename)
+    filepath = os.sep.join(["texts", filename])
+    file = frontmatter.load(filepath)
+    return file.content
 
 
 if __name__ == '__main__':
diff --git a/static/style.css b/static/style.css
index 652f805..2405202 100644
--- a/static/style.css
+++ b/static/style.css
@@ -28,14 +28,14 @@ header {
 #sidebar {
     float: right;
     top: 80px;
-    width: 23%;
+    width: 25%;
     position: sticky;
     position: -webkit-sticky;
 }
 
 #content {
     width: 70%;
-    margin-right: 7%;
+    margin-right: 5%;
 }
 
 #text-meta { 
@@ -45,3 +45,8 @@ header {
     box-shadow: 1px 1px 3px 0px rgba(0,0,0,0.7);
     padding: 20px;
 }
+
+#text-meta>p {
+    margin: 0;
+    padding: 5px;
+}
diff --git a/templates/text_maker.html b/templates/text_maker.html
index d5b87e6..321dae0 100644
--- a/templates/text_maker.html
+++ b/templates/text_maker.html
@@ -13,9 +13,18 @@
 <div id="main">
     <div id="sidebar">
         <div id="text-meta">
-            {% with filename = meta.source.filename %}
-            Trained on <a href="texts/{{ filename }}">{{ filename }}</a>
-            {% endwith %}
+            <p>
+                <b>Training File</b><br>
+                {% with filename = meta.source.filename %}
+                <a href="texts/{{ filename }}">{{ filename }}</a>
+                {% endwith %}
+            {% if meta.source.description %}
+            </p>
+            <p>
+                <b>Description</b><br>
+                {{ meta.source.description }}
+            </p>
+            {% endif %}
         </div>
     </div>
     <div id="content">
diff --git a/textmaker/__pycache__/__init__.cpython-34.pyc b/textmaker/__pycache__/__init__.cpython-34.pyc
deleted file mode 100644
index 837b19c..0000000
Binary files a/textmaker/__pycache__/__init__.cpython-34.pyc and /dev/null differ
diff --git a/textmaker/__pycache__/core.cpython-34.pyc b/textmaker/__pycache__/core.cpython-34.pyc
deleted file mode 100644
index 6cea232..0000000
Binary files a/textmaker/__pycache__/core.cpython-34.pyc and /dev/null differ
diff --git a/textmaker/core.py b/textmaker/core.py
index 66b5ef2..c9c99b9 100644
--- a/textmaker/core.py
+++ b/textmaker/core.py
@@ -1,10 +1,14 @@
 import os
 import markov
+import frontmatter
 from abc import abstractmethod
 from dictmerge import dictmerge
 
 class TextMaker():
 
+    def __init__(self):
+        self._meta = dict()
+
     @abstractmethod
     def train(self):
         pass
@@ -16,21 +20,14 @@ class TextMaker():
 
 class MarkovMaker(TextMaker):
 
-    def __init__(self):
-        self._meta = dict()
-
-    def train(self, filepath, **src_meta):
-        with open(filepath) as f:
-            text = f.read()
+    def train(self, filepath):
+        file = frontmatter.load(filepath)
         filename = filepath.split(os.sep)[-1]
-        self._meta["source"] = dictmerge({
-            "filename": filename,
-            "length": len(text)
-        }, src_meta)
-        self.chains = markov.make_chains(text)
+        self._meta["source"] = dictmerge(file.metadata, filename=filename)
+        self.chains = markov.make_chains(file.content)
 
     def make_text(self, return_meta=False):
-        if not hasattr(self, "chains"):
+        if not hasattr(self, "chains") or not hasattr(self, "_meta"):
             raise RuntimeError("`train` must be called before `make_text`.")
 
         text = markov.make_text(self.chains)
diff --git a/texts/trump.txt b/texts/trump.txt
index ca95754..12a63e2 100644
--- a/texts/trump.txt
+++ b/texts/trump.txt
@@ -1,3 +1,7 @@
+---
+wordsmith: President Donald Trump
+description: A collection of speeches from Donald Trump, including his Inaugural Address, speeches from campaign rallies, and an address to the United States Congress.
+---
 PRESIDENT:  Thank you very much.  Mr. Speaker, Mr. Vice President, members of Congress, the First Lady of the United States — (applause) — and citizens of America:
 
 Tonight, as we mark the conclusion of our celebration of Black History Month, we are reminded of our nation’s path towards civil rights and the work that still remains to be done.  (Applause.)  Recent threats targeting Jewish community centers and vandalism of Jewish cemeteries, as well as last week’s shooting in Kansas City, remind us that while we may be a nation divided on policies, we are a country that stands united in condemning hate and evil in all of its very ugly forms.  (Applause.)
 
